from typing import Any, Mapping, Dict, Optional

class DataClassDictMixin:
    def __init_subclass__(cls, **kwargs: Any) -> None: ...
    def __post_serialize__(self, dct: Mapping, options: Optional[Dict[str, Any]]) -> Any: ...
    @classmethod
    def __pre_deserialize__(cls: Any, dct: Mapping, options: Optional[Dict[str, Any]]) -> Any: ...
    def to_dict( self, use_bytes: bool = False, use_enum: bool = False, use_datetime: bool = False, options: Optional[Dict[str, Any]] = None) -> dict: ...
    @classmethod
    def from_dict( cls, d: Mapping, use_bytes: bool = False, use_enum: bool = False, use_datetime: bool = False, options: Optional[Dict[str, Any]] = None) -> Any: ...
